# mac_oui_search.py
# author: Diego Magdaleno
# This script retrieves a text file from IEEE containing the list of
# OUI manufacturers for Media Access Control (MAC) Addresses. The file
# is saved and its contents are used to determine the manufacturer of
# the current MAC addresses for all network interfaces on the host
# machine. This script will work only on all GNU linux distributions
# since it uses the wget command.
# Python 3.7
# Linux


import json
import os
import subprocess


def main():
	# First, if the file was retrieved successfully, "oui.txt"
	# should be in the current directory. If not, then run the wget
	# command to pull it from the internet.
	if not os.path.exists("oui.txt"):
		print("Could not find \"oui.txt\". Pulling from the internet.")	
	
		# Try to retrieve the text file from IEEE using the
		# subprocess module and wget command.
		get_cmd = "wget http://standards-oui.ieee.org/oui.txt"
		get_file = subprocess.Popen(get_cmd, shell=True,
						stderr=subprocess.PIPE)
		get_file_err = get_file.communicate()[1].decode("utf-8")

		# Now try again to find the file in the current
		# directory. If the file is not there, exit the program.
		if not os.path.exists("oui.txt"):
			print("ERROR: Could not retrieve \"oui.txt\". Exiting program.")
			exit(1)

	# Now that we have the file, open it and read is contents.
	oui_file = open("oui.txt", "r")
	oui_file_lines = oui_file.readlines()
	oui_file.close()
	
	# For debug, print out the file contents.	
	#for line in oui_file_lines:
	#	print(line)

	# Group every OUI. 
	group_lines = []
	start = 4
	for line in range(start, len(oui_file_lines)):
		#if line - start == 5 and line != start:
		#print(str(len(oui_file_lines[line])) + oui_file_lines[line])
		if len(oui_file_lines[line]) == 1:
			group_lines.append("".join(oui_file_lines[start:line]))
			start = line + 1

	# For debug, print out the groups parsed from the file.	
	#for group in group_lines:
	#	print(group)
	#	print("-"*72)

	# Save the data in a JSON format. For that, store the groups in
	# a dictionary. The key will be "Organization" and its value
	# will be another dictionary. That dictionary will have the
	# keys "OUI/MA-L (hex)", "company_id (base 16)", and "address".
	# For example:
	# {Nokia:
	# 	{organization: "Nokia"
	#  	 OUI/MA-L (hex): ["40-55-82", "A4-E3-1B"]
	#  	 company_id (base 16): ["40-55-82", "A4-E3-1B"]
	#  	 address: "600 March Road Kanata  Ontario  K2K 2E6 CA"
	# 	}
	# }
	mac_dict = {}
	for group in group_lines:
		# Split the group string by its lines for easier
		# parsing.
		group_lines = group.split("\n")
		
		# Extract the company name (organization), OUI/MA-L,
		# and company_id from the first two lines.
		company_name = " ".join(group_lines[0].split()[2:])
		oui_ma_l = group_lines[0].split()[0]
		company_id = group_lines[1].split()[0]

		# Acquire the address from the remaining (3) lines.
		address = ""
		for line in group_lines[2:]:
			if group_lines[2:].index(line) > 0:
				address += " "
			address += " ".join(line.split())

		# For debug, print out the fields parsed from the line
		# data from the group.
		#print("company name: " + company_name)
		#print("OUI/MA-L: " + oui_ma_l)
		#print("company id: " + company_id)
		#print("address: " + address)

		# Save the data in the dictionary. If the company does
		# not already exist in the dictionary, save its data.
		# Otherwise, append the OUI/MA-L and company_id to the
		# existing entry for that company.
		if company_name not in mac_dict:
			company_dict = {"organization": company_name,
					"OUI/MA-L (hex)": [oui_ma_l],
					"company_id (base 16)": [company_id],
					"address": address}
			mac_dict[company_name] = company_dict
		else:
			mac_dict[company_name]["OUI/MA-L (hex)"].append(oui_ma_l)
			mac_dict[company_name]["company_id (base 16)"].append(company_id)
 
	# Save the dictionary to a JSON file. 
	with open("mac_oui.json", "w+") as json_file:
		json.dump(mac_dict, json_file, indent=4, sort_keys=True)

	# Determine the manufacturer of the current network devices on
	# the host machine. First, get the network devices through the
	# "ifconfig" command.
	ifconfig_cmd = subprocess.Popen("ifconfig", shell=True, stdout=subprocess.PIPE)
	ifconfig_cmd_out = ifconfig_cmd.communicate()[0].decode("utf-8").split("\n")
	
	# Next, iterate through the lines output by the "ifconfig"
	# command. Save the lines to each interface found in a list.
	# Each entry corresponds to one network interface.
	start = 0
	interface_blocks = []
	for line in range(len(ifconfig_cmd_out)):
		if ifconfig_cmd_out[line] == "" and \
			line != len(ifconfig_cmd_out)-1:
			interface_block = ifconfig_cmd_out[start:line]
			interface_blocks.append(interface_block)
			start = line + 1

	# After that, iterate through the blocks. For each block,
	# extract the name of the interface, the OUI of the MAC
	# address, and the manufacturer name and address that
	# corresponds to the OUI. Print that information out.
	for block in interface_blocks:
		# Interface name is the first word in the first line of
		# the block. Clean the name so that the ":" is removed.
		print("Interface: " + block[0].split()[0].replace(":", ""))
		
		# Iterate through the remaining lines to find the rest
		# of the information.
		for i in block:
			# The MAC address is on the same line as
			# "ether".
			if "ether" in i:
				# Isolate the MAC address and
				# capitalize any letters that it may
				# contain.
				mac_addr = i.split()[1].upper()
				print("\tMAC Address: " + mac_addr)
				
				# From the MAC address, determine if the
				# address is OUI+UAA (Universally
				# Administered Address) or is an LAA
				# (Locally Administered Address) assigned
				# by the router (check the second least
				# significant bit of the most significant
				# byte is 1, the it's LAA, otherwise it's
				# not). If the address is an OUI+UAA,
				# then create the OUI for that for that
				# address. Use that to iterate through
				# the dictionary to look for manufacturer
				# information.
				mac_most_sig_byte = mac_addr.split(":")[0]
				ul_bit = int(mac_most_sig_byte, 16)
				if ul_bit & int("20", 16):
					print("\tMAC is a Locally Administered Address.")
				else:
					mac_oui = "-".join(mac_addr.split(":")[:3])
					for key in mac_dict:
						if mac_oui in mac_dict[key]["OUI/MA-L (hex)"]:
							print("\tManufacturer Name: " + mac_dict[key]["organization"])
							print("\tManufacturer Address: " + mac_dict[key]["address"])
	
	# Exit the program.
	exit(0)


if __name__ == '__main__':
	main()
