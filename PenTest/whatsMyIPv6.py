# whatsMyIPv6.py
# author: Diego Magdaleno
# Used the Operating system's internal command to print out the machine's
# link and global IPv6 addresses.
# Python 3.7
# Windows/MacOS/Linux


import platform
import subprocess
from subprocess import PIPE


def main():
	# Detect the host machine's operating system.
	if platform.system() == "Windows":
		get_ipv6_Windows()
	else:
		get_ipv6_Linux()

	# Exit the program.
	exit(0)


def get_ipv6_Windows():
	# Issue the "ipconfig" command to the Windows machine and read the
	# output.
	net_cmd = subprocess.Popen("ipconfig", shell=True, stdout=PIPE)
	net_cmd_output = net_cmd.communicate()[0].decode("utf-8")
	
	# Iterate through the available network interfaces, listing out
	# the link and global IPv6 addresses.
	output_lines = net_cmd_output.split("\n")[3:]
	interface_blocks = []
	start = 0
	for line in range(start, len(output_lines)):
		if len(output_lines[line]) > 0 and output_lines[line][0] != " " or line == len(output_lines)-1:
			interface = "\n".join(output_lines[start:line])
			interface_blocks.append(interface)
			start = line

	refined_interface_blocks = []
	for i in range(len(interface_blocks)):
		if len(interface_blocks[i]) > 1: 
			refined_interface_blocks.append(interface_blocks[i])

	interface_blocks = []
	for j in range(0, len(refined_interface_blocks), 2):
		interface_blocks.append(refined_interface_blocks[j] + "\n" + \
						refined_interface_blocks[j+1])

	# Print the addresses for each active interface.
	for interface in interface_blocks:
		if "Media disconnected" in interface:
			continue
		else:
			interface_lines = interface.split("\n")
			interface_name = interface_lines[0]
			print(interface_name)
			for line in interface_lines:
				if "Link-local IPv6" in line:
					address = line.split()[-1]
					print("\tlink: " + address)
				elif "IPv6" in line:
					address = line.split()[-1]
					print("\tglobal: " + address)

	# Return from the function.
	return


def get_ipv6_Linux():
	# Issue the "ifconfig" command to the Linux machine and read the
	# output.
	net_cmd = subprocess.Popen("ifconfig", shell=True, stdout=PIPE)
	net_cmd_output = net_cmd.communicate()[0].decode("utf-8")
	
	# Iterate through the available network interfaces, listing out
	# the link and global IPv6 addresses.
	output_lines = net_cmd_output.split("\n")
	interface_blocks = []
	start = 0
	for line in range(start, len(output_lines)):
		if output_lines[line] == "":
			interface = "\n".join(output_lines[start:line])
			interface_blocks.append(interface)
			start = line + 1
	interface_blocks.pop()

	# Only print the addresses of interfaces that we want. Note: valid
	# interfaces include 'eth', 'wlan', 'usb', and 'vlan'. Invalid 
	# interfaces include 'lo'.
	for interface in interface_blocks:
		if "lo" in interface[:5]:
			continue
		else:
			interface_lines = interface.split("\n")
			interface_name = interface_lines[0].split(":")[0]
			print(interface_name)
			for line in interface_lines:
				if "inet6" in line and "link" in line:
					address = line.split()[1]
					print("\tlink: " + address)
				elif "inet6" in line and "global" in line:
					address = line.split()[1]
					print("\tglobal: " + address)

	# Return from the function.
	return


if __name__ == '__main__':
	main()
