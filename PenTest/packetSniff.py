# packetSniff.py
# Basic packet sniffer. Code based off blog.
# http://www.bitforestinfo.com/2017/01/how-to-write-simple-packet-sniffer.html
# Python 3.6
# Windows 10

import socket
import platform
import os
import struct
import binascii


def main():
	# Depending on os, create socket.socket object.
	if platform.system() == "Windows":
		createWinSock()
	elif os.name == "posix":
		createLinSock()


def createWinSock():
	s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
	s.bind(("YOUR_INTERFACE_IP", 0))
	#s.bind((socket.gethostbyname(socket.gethostname()), 0))
	s.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
	s.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)
	sniff(s)


def createLinSock():
	s = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, 
						socket.ntohs(0x0800))
	#s = socket.socket(socket.AF_INET, socket.SOCK_RAW, 
	#					socket.IPPROTO_TCP)
	sniff(s)


def sniff(s):
	# Recieve a packet
	while True:
		# Print packet to terminal.
		#print(s.recvfrom(65565))

		packet = s.recvfrom(65565)

		# Print data to terminal.
		print("\n\n===&gt;&gt; [+] ---------- Ethernet Header ---------- [+]")
		for i in eth_Header(packet[0][0:14]).iteritems():
			a, b = i
			print("{} : {} | ".format(a,b)),
		print("\n\n===&gt;&gt; [+] ---------- IP Header ---------- [+]")
		for i in ip_Header(packet[0][14:34]).iteritems():
			a, b = i
			print("{} : {} | ".format(a,b)),
		print("\n\n===&gt;&gt; [+] ---------- TCP Header ---------- [+]")
		for i in tcp_Header(packet[0][34:54]).iteritems():
			a, b = i
			print("{} : {} | ".format(a,b)),


def eth_Header(data):
	storeObj = data
	storeObj = struct.unpack("!6s6sH", storeObj)
	destination_mac = binascii.hexlify(storeObj[0])
	source_mac = binascii.hexlify(storeObj[1])
	eth_protocol = storeObj[2]
	data = {"Destination Mac": destination_mac, 
			"Source Mac": source_mac, "Protocol": eth_protocol}
	return data


def icmp_Header(data):
	icmph = struct.unpack("!BBH", data)
	icmp_type = icmph[0]
	code = icmph[1]
	checksum = icmph[2]
	data = { "ICMP Type": icmp_type, "Code": code, 
			"CheckSum": checksum}
	return data


def ip_Header(data):
	storeObj = struct.unpack("!BBHHHBBH4s4s", data)
	_version = storeObj[0]
	_tos = storeObj[1]
	_total_length = storeObj[2]
	_identification = storeObj[3]
	_fragment_Offset = storeObj[4]
	_ttl = storeObj[5]
	_protocol = storeObj[6]
	_header_checksum = storeObj[7]
	_source_address = storeObj[8]
	_destination_address = storeObj[9]
	data = {"Version": _version, "Tos": _tos, 
			"Total Length": _total_length, 
			"Identification": _identification, 
			"Fragment": _fragment_Offset, "TTL": _ttl, 
			"Protocol": _protocol, "Header CheckSum": _header_checksum,
			"Source Address": _source_address, 
			"Destination Address": _destination_address}
	return data


def tcp_Header(data):
	storeObj = struct.unpack("!HHLLBBHHH", data)
	_source_port = storeObj[0]
	_destination_port = storeObj[1]
	_sequence_number = storeObj[2]
	_acknowledge_number = storeObj[3]
	_offset_reserved = storeObj[4]
	_tcp_flag = storeObj[5]
	_window = storeObj[6]
	_checksum = storeObj[7]
	_urgent_pointer = storeObj[8]
	data = {"Source Port": _source_port,
			"Destination Port": _destination_port,
			"Sequence Number": _sequence_number,
			"Acknowledge Number": _acknowledge_number,
			"Offset &amp; Reserved": _offset_reserved,
			"TCP Flag": _tcp_flag, "Window": _window, 
			"CheckSum": _checksum, "Urgent Pointer": _urgent_pointer}
	return data


def udp_Header(data):
	icmph = struct.unpack("!BBH", data)
	icmp_type = icmph[0]
	code = icmph[1]
	checksum = icmph[2]
	data = {"ICMP Type": icmp_type, "Code": code, "CheckSum": checksum}
	return data


if __name__ == '__main__':
	main()
